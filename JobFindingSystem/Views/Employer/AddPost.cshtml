@model JobFindingSystem.Models.AddPostVM
@{
    ViewBag.Title = "Add New Post";
    Layout = "~/Views/Shared/_AccountLayout.cshtml";
}
<div class="forms">
    <h2 class="title1">@ViewBag.Title</h2>
    <div class="form-grids row widget-shadow" data-example-id="basic-forms">
        <div class="form-title">
            <h4>New Post Information</h4>
        </div>
        <div class="form-body">
            <div class="alert-success" role="alert">
                @TempData["info"]
            </div>
            <form method="post" enctype="multipart/form-data" class="form-horizontal">
                <div class="form-group">
                    <div class="col-sm-2"></div>
                    <label class="col-sm-3">
                        @Html.TextBoxFor(m => m.Photo, new { type = "file", accept = "image/*", style = "display:none" })
                        <img src="~/Photo/upload.png" width="200" height="200" id="prev">
                    </label>
                    <div class="col-sm-4">
                        @Html.ValidationMessageFor(m => m.Photo, "", new { Class = "alert-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.postTitle, new { Class = "col-sm-2 control-label" })
                    <div class="col-sm-6">
                        @Html.TextBoxFor(m => m.postTitle, new { maxlength = 50, required = "", autofocus = "", Class = "form-control1 col-sm-6", placeholder = "Enter your job title" })
                    </div>
                    <div class="col-sm-4">
                        @Html.ValidationMessageFor(m => m.postTitle, "", new { Class = "alert-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.postDesc, new { Class = "col-sm-2 control-label" })
                    <div class="col-sm-6">
                        @Html.TextAreaFor(m => m.postDesc, new { maxlength = 300, required = "", Class = "form-control1 col-sm-6", placeholder = "Enter your job description" })
                    </div>
                    <div class="col-sm-4">
                        @Html.ValidationMessageFor(m => m.postDesc, "", new { Class = "alert-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.jobCategory, new { Class = "col-sm-2 control-label" })
                    <div class="col-sm-6">
                        @Html.DropDownListFor(x => x.jobCategory, new SelectList(ViewBag.JobCategory, "jobID", "name"), new { Class = "form-control col-sm-6 seachSelector" })
                    </div>
                    <div class="col-sm-4">
                        @Html.ValidationMessageFor(m => m.jobCategory, "", new { Class = "alert-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.jobAddress, new { Class = "col-sm-2 control-label" })
                    <div class="col-sm-6">
                        @Html.TextBoxFor(m => m.jobAddress, new { id = "autocomplete", maxlength = 250, required = "", Class = "form-control1 col-sm-6", placeholder = "Enter your working address", onfocus = "geolocate()" })
                    </div>
                    <div class="col-sm-4">
                        @Html.ValidationMessageFor(m => m.jobAddress, "", new { Class = "alert-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.workingDateTime, new { Class = "col-sm-2 control-label" })
                    <div class="col-sm-6">
                        @Html.TextBoxFor(m => m.workingDateTime, "{0:yyyy-MM-dd}", new {
                            type = "date",
                            // TODO: Set min and max
                            min = DateTime.Today.AddDays(1).ToString("yyyy-MM-dd"),
                            max = DateTime.Today.AddDays(30).ToString("yyyy-MM-dd"),
                            Class = "form-control1 col-sm-6"
                        })

                    </div>
                    <div class="col-sm-4">
                        @Html.ValidationMessageFor(m => m.workingDateTime, "", new { Class = "alert-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.expectedWage, new { Class = "col-sm-2 control-label" })
                    <div class="col-sm-6">
                        @Html.TextBoxFor(m => m.expectedWage, new { maxlength = 12, required = "", Class = "form-control1 col-sm-6", placeholder = "Enter your expected wage for paying" })
                    </div>
                    <div class="col-sm-4">
                        @Html.ValidationMessageFor(m => m.expectedWage, "", new { Class = "alert-danger" })
                    </div>
                </div>

                <div class="col-sm-8"></div>
                <div class="col-sm-12" style="margin-bottom: 20px; text-align: right">
                    <button class="btn btn-dark" data-url="/Employer/AddPost">Reset</button>
                    <button class="btn btn-default" data-url="/Employer/CurrentPost">Back to List</button>
                    <button class="btn btn-primary">Add</button>
                </div>
                <br>
            </form>
        </div>
    </div>
</div>
@section footer {
    <script>
        $(function () {
            $(".seachSelector").customselect();
        });
    </script>

    <script>
        // TODO: Enable validation on hidden inputs
        $.validator.setDefaults({ ignore: "" });

        var img = $("#prev")[0];
        var src = img.src;

        img.onerror = function () {
            img.src = src;
            $("#Photo").val("");
        };

        $("#Photo").change(function (e) {
            var f = this.files[0];
            img.src = f ? URL.createObjectURL(f) : "";
        });
    </script>

    <%-- Google address searching --%>
    <script>
        // This example displays an address form, using the autocomplete feature
        // of the Google Places API to help users fill in the information.

        // This example requires the Places library. Include the libraries=places
        // parameter when you first load the API. For example:
        // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

        var placeSearch, autocomplete;
        var componentForm = {
            street_number: 'long_name',
            route: 'long_name',
            locality: 'long_name',
            administrative_area_level_1: 'short_name',
            country: 'long_name',
            postal_code: 'short_name'
        };

        function initAutocomplete() {
            // Create the autocomplete object, restricting the search to geographical
            // location types.
            autocomplete = new google.maps.places.Autocomplete(
                        /** @@type {!HTMLInputElement} */(document.getElementById('autocomplete')),
                { types: ['geocode'] });

            // When the user selects an address from the dropdown, populate the address
            // fields in the form.
            autocomplete.addListener('place_changed', fillInAddress);
        }

        function fillInAddress() {
            // Get the place details from the autocomplete object.
            var place = autocomplete.getPlace();

            for (var component in componentForm) {
                $('.' + component).val("");
            }

            // Get each component of the address from the place details
            // and fill the corresponding field on the form.
            console.log(place.address_components);
            for (var i = 0; i < place.address_components.length; i++) {
                var addressType = place.address_components[i].types[0];
                if (componentForm[addressType]) {
                    var val = place.address_components[i][componentForm[addressType]];
                    $('.' + addressType).val(val);
                }
            }
        }

        // Bias the autocomplete object to the user's geographical location,
        // as supplied by the browser's 'navigator.geolocation' object.
        function geolocate() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    var geolocation = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };
                    var circle = new google.maps.Circle({
                        center: geolocation,
                        radius: position.coords.accuracy
                    });
                    autocomplete.setBounds(circle.getBounds());
                });
            }
        }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDbi_YnG0TT_9rn_74DIzmuSdW1CDb0q2Y&libraries=places&callback=initAutocomplete"
            async defer></script>
}